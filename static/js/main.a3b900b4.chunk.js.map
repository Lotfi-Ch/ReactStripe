{"version":3,"sources":["assets/spatula.jpg","components/PaymentForm.js","components/StripeContainer.js","App.js","reportWebVitals.js","index.js"],"names":["CARD_OPTIONS","iconStyle","style","base","iconColor","color","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","PaymentForm","useState","success","setSuccess","stripe","useStripe","elements","useElements","handleSubmit","e","a","preventDefault","createPaymentMethod","type","card","getElement","CardElement","error","paymentMethod","id","axios","post","amount","data","console","log","message","onSubmit","className","options","stripeTestPromise","loadStripe","StripeContainer","App","showItem","setShowItem","src","spatula","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAAe,G,MAAA,IAA0B,qC,wDCKnCA,EAAe,CACpBC,UAAW,QACXC,MAAO,CACNC,KAAM,CACLC,UAAW,UACXC,MAAO,OACPC,WAAY,IACZC,WAAY,0CACZC,SAAU,OACVC,cAAe,cACf,oBAAqB,CAAEJ,MAAO,WAC9B,gBAAiB,CAAEA,MAAO,YAE3BK,QAAS,CACRN,UAAW,UACXC,MAAO,aAKK,SAASM,IAAe,IAAD,EACHC,oBAAS,GADN,mBAC3BC,EAD2B,KAClBC,EADkB,KAE5BC,EAASC,sBACTC,EAAWC,wBAGXC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACjBD,EAAEE,iBADe,SAEoBP,EAAOQ,oBAAoB,CAC5DC,KAAM,OACNC,KAAMR,EAASS,WAAWC,iBAJb,mBAEVC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,cAMdD,EARiB,iCAUNE,EAAMD,EAANC,GAVM,UAWUC,IAAMC,KAAK,gCAAiC,CAC/DC,OAAQ,IACRH,OAbS,eAgBDI,KAAKrB,UACbsB,QAAQC,IAAI,sBACZtB,GAAW,IAlBF,kDAsBbqB,QAAQC,IAAI,QAAZ,MAtBa,gCAyBjBD,QAAQC,IAAIR,EAAMS,SAzBD,0DAAH,sDA6BlB,OACI,mCACExB,EAUH,8BACI,qHAVH,uBAAMyB,SAAUnB,EAAhB,UACI,0BAAUoB,UAAU,YAApB,SACI,qBAAKA,UAAU,UAAf,SACI,cAAC,cAAD,CAAaC,QAASxC,QAG9B,8CChEZ,IAEMyC,EAAoBC,YAFP,oCAIJ,SAASC,IACvB,OACC,cAAC,WAAD,CAAU5B,OAAQ0B,EAAlB,SACC,cAAC9B,EAAD,MCWYiC,MAlBf,WAAgB,IAAD,EACkBhC,oBAAS,GAD3B,mBACPiC,EADO,KACGC,EADH,KAEd,OACC,sBAAKP,UAAU,MAAf,UACC,mDACCM,EACA,cAACF,EAAD,IAEA,qCACC,wCACA,qBAAKI,IAAKC,EAASC,IAAI,YACvB,wBAAQC,QAAS,kBAAMJ,GAAY,IAAnC,qCCJUK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a3b900b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spatula.d4a3f627.jpg\";","import { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\"\nimport axios from \"axios\"\nimport React, { useState } from 'react'\n\n\nconst CARD_OPTIONS = {\n\ticonStyle: \"solid\",\n\tstyle: {\n\t\tbase: {\n\t\t\ticonColor: \"#c4f0ff\",\n\t\t\tcolor: \"#fff\",\n\t\t\tfontWeight: 500,\n\t\t\tfontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\n\t\t\tfontSize: \"16px\",\n\t\t\tfontSmoothing: \"antialiased\",\n\t\t\t\":-webkit-autofill\": { color: \"#fce883\" },\n\t\t\t\"::placeholder\": { color: \"#87bbfd\" }\n\t\t},\n\t\tinvalid: {\n\t\t\ticonColor: \"#ffc7ee\",\n\t\t\tcolor: \"#ffc7ee\"\n\t\t}\n\t}\n}\n\nexport default function PaymentForm() {\n    const [success, setSuccess ] = useState(false)\n    const stripe = useStripe()\n    const elements = useElements()\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        const {error, paymentMethod} = await stripe.createPaymentMethod({\n            type: \"card\",\n            card: elements.getElement(CardElement)\n        })\n\n\n    if(!error) {\n        try {\n            const {id} = paymentMethod\n            const response = await axios.post(\"http://localhost:4000/payment\", {\n                amount: 1000,\n                id\n            })\n\n            if(response.data.success) {\n                console.log(\"Successful payment\")\n                setSuccess(true)\n            }\n\n        } catch (error) {\n            console.log(\"Error\", error)\n        }\n    } else {\n        console.log(error.message)\n    }\n}\n\n    return (\n        <>\n        {!success ? \n        <form onSubmit={handleSubmit}>\n            <fieldset className=\"FormGroup\">\n                <div className=\"FormRow\">\n                    <CardElement options={CARD_OPTIONS}/>\n                </div>\n            </fieldset>\n            <button>Pay</button>\n        </form>\n        :\n       <div>\n           <h2>You just bought a sweet spatula congrats this is the best decision of you're life</h2>\n       </div> \n        }\n            \n        </>\n    )\n}\n","import { Elements } from \"@stripe/react-stripe-js\"\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport React from \"react\"\nimport PaymentForm from \"./PaymentForm\"\n\nconst PUBLIC_KEY = \"pk_test_rgWMA3zxjAtwaB6iV8b5W40x\"\n\nconst stripeTestPromise = loadStripe(PUBLIC_KEY)\n\nexport default function StripeContainer() {\n\treturn (\n\t\t<Elements stripe={stripeTestPromise}>\n\t\t\t<PaymentForm />\n\t\t</Elements>\n\t)\n}\n","import { useState } from 'react';\nimport './App.css';\nimport spatula from './assets/spatula.jpg';\nimport StripeContainer from './components/StripeContainer';\n\nfunction App() {\n\tconst [showItem, setShowItem] = useState(false);\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1>The Spatula Store</h1>\n\t\t\t{showItem ? (\n\t\t\t\t<StripeContainer />\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<h3>$10.00</h3>\n\t\t\t\t\t<img src={spatula} alt='Spatula' />\n\t\t\t\t\t<button onClick={() => setShowItem(true)}>Purchase Spatula</button>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}